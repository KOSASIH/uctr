import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Define a class to represent the AI model
class AIModel:
    def __init__(self):
        self.model = RandomForestClassifier(n_estimators=100, random_state=42)

    def train(self, X, y):
        self.model.fit(X, y)

    def predict(self, X):
        return self.model.predict(X)

    def evaluate(self, X, y):
        y_pred = self.model.predict(X)
        accuracy = accuracy_score(y, y_pred)
        report = classification_report(y, y_pred)
        matrix = confusion_matrix(y, y_pred)
        return accuracy, report, matrix

# Load the training data
df = pd.read_csv('ai_training_data.csv')

# Preprocess the data
X = df.drop(['vulnerability'], axis=1)
y = df['vulnerability']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create an instance of the AI model
model = AIModel()

# Train the model
model.train(X_train, y_train)

# Evaluate the model
accuracy, report, matrix = model.evaluate(X_test, y_test)
print(f"Accuracy: {accuracy:.3f}")
print(f"Classification Report:\n{report}")
print(f"Confusion Matrix:\n{matrix}")

# Use the model to make predictions
predictions = model.predict(X_test)
print(f"Predictions:\n{predictions}")
